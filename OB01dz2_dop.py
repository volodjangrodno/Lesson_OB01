# *Дополнительное задание:
#
# Ты разрабатываешь программное обеспечение для сети магазинов.
# Каждый магазин в этой сети имеет свои особенности, но также существуют общие характеристики,
# такие как адрес, название и ассортимент товаров. Ваша задача — создать класс Store,
# который можно будет использовать для создания различных магазинов.
#
# Шаги:
#
# 1. Создай класс Store:
#
# -Атрибуты класса:
# name: название магазина.
# address: адрес магазина.
# items: словарь, где ключ - название товара, а значение - его цена.
# Например, {'apples': 0.5, 'bananas': 0.75}.
#
# Методы класса:
# __init__ - конструктор, который инициализирует название и адрес,
# а также пустой словарь для items`.
# -  метод для добавления товара в ассортимент.
# метод для удаления товара из ассортимента.
# метод для получения цены товара по его названию. Если товар отсутствует, возвращайте None.
# метод для обновления цены товара.
#
# 2. Создай несколько объектов класса Store:
#
# Создай не менее трех различных магазинов с разными названиями,
# адресами и добавь в каждый из них несколько товаров.
#
# 3. Протестировать методы:
#
# Выбери один из созданных магазинов и протестируй все его методы: добавь товар, обнови цену,
# убери товар и запрашивай цену.

class Store:
    def __init__(self, name, address):
        self.name = name
        self.address = address
        self.items = {}

    def add_item(self, item_name, price):
        self.items[item_name] = price
        print(f"Товар '{item_name}' добавлен. Цена товара - {price}.")

    def remove_item(self, item_name):
        if item_name in self.items:
            del self.items[item_name]
            print(f"Товар '{item_name}' удален.")
        else:
            print(f"Товар '{item_name}' не найден в ассортименте.")

    def get_price(self, item_name):
        return self.items.get(item_name, None)

    def update_price(self, item_name, new_price):
        if item_name in self.items:
            self.items[item_name] = new_price
            print(f"Цена товара '{item_name}' обновлена до {new_price}.")
        else:
            print(f"Товар '{item_name}' не найден для обновления цены.")

# Создание объектов класса Store
store1 = Store("Магазин 1", "Улица Некрасова, Дом 1")
store2 = Store("Магазин 2", "Улица Пушкина, Дом 15")
store3 = Store("Магазин 3", "Улица Ленина, Дом 20")

# Добавление товаров
store1.add_item("Яблоки", 0.5)
store1.add_item("Бананы", 0.75)

store2.add_item("Колбаса", 1.0)
store2.add_item("Молоко", 0.9)

store3.add_item("Вода", 0.3)
store3.add_item("Шоколад", 1.5)

# Тестирование методов на одном из магазинов
print("\nТестирование методов для 'Магазин 1':")
print(f"Цена 'Яблоки': {store1.get_price('Яблоки')}")

store1.remove_item("Бананы")
print(f"Цена 'Бананы': {store1.get_price('Бананы')}")

store1.add_item("Груши", 0.6)

store1.update_price("Яблоки", 0.55)
print(f"Обновленная цена 'Яблоки': {store1.get_price('Яблоки')}")

# Попытка удалить несуществующий товар
store1.remove_item("Апельсины")